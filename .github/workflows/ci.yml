name: Prototype Runtime CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ubuntu-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 4
    strategy:
      matrix:
        python-version: [3.8.5]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        id: cache-deps
        with:
          path: ./venv/
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m venv venv

      - name: Install Cape Coordinator client.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          mkdir build && cd build
          git clone https://${{ secrets.CAPE_PAT }}@github.com/capeprivacy/coordinator-client.git
          cd coordinator-client && pip install -r requirements.txt && pip install -e .

      - name: Install dependencies.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          make pydep

      - name: Install runtime package.
        run: |
          . venv/bin/activate
          make pylib

      - name: Lint the runtime package.
        run: |
          . venv/bin/activate
          make lint

      - name: Build the runtime.
        run: |
          . venv/bin/activate
          make build

      - name: Test the runtime.
        run: |
          . venv/bin/activate
          make test

  macos-ci:
    runs-on: macos-latest
    timeout-minutes: 2
    strategy:
      matrix:
        python-version: [3.8.5]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        id: cache-deps
        with:
          path: ./venv/
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m venv venv

      - name: Install dependencies.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          make pydep

      - name: Install runtime package.
        run: |
          . venv/bin/activate
          make pylib

      - name: Lint the runtime package.
        run: |
          . venv/bin/activate
          make lint

      - name: Build the runtime.
        run: |
          . venv/bin/activate
          make build

      - name: Test the runtime.
        run: |
          . venv/bin/activate
          make test
